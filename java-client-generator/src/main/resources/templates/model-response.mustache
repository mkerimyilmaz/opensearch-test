import org.opensearch.client.json.JsonpDeserializable;
import org.opensearch.client.json.JsonpDeserializer;
import org.opensearch.client.json.JsonpMapper;
import org.opensearch.client.json.JsonpSerializable;
import org.opensearch.client.json.ObjectBuilderDeserializer;
import org.opensearch.client.json.ObjectDeserializer;
import org.opensearch.client.util.ApiTypeHelper;
import org.opensearch.client.util.ObjectBuilder;
import org.opensearch.client.util.ObjectBuilderBase;
import jakarta.json.stream.JsonGenerator;

import java.util.Map;
import java.util.List;
import java.util.function.Function;

{{>generatedAnnotation}}
@JsonpDeserializable
public class {{classname}} implements JsonpSerializable {

    {{#vars}}
    private final {{{datatypeWithEnum}}} {{name}};
    {{/vars}}


    private {{classname}}(Builder builder) {
        {{#vars}}
        this.{{name}} = builder.{{name}};
        {{/vars}}
    }

    public static {{classname}} of(Function<Builder, ObjectBuilder<{{classname}}>> fn) {
        return fn.apply(new Builder()).build();
    }

    {{#vars}}
    public {{{datatypeWithEnum}}} {{getter}}() {
        return this.{{name}};
    }
    {{/vars}}

    public void serialize(JsonGenerator generator, JsonpMapper mapper) {
        generator.writeStartObject();
        serializeInternal(generator, mapper);
        generator.writeEnd();
    }

    protected void serializeInternal(JsonGenerator generator, JsonpMapper mapper) {
        super.serializeInternal(generator, mapper);
        
        {{#vars}}
        {{#isMap}}
        if (ApiTypeHelper.isDefined(this.indices)) {
            generator.writeKey("{{#lambda.snakecase}}{{name}}{{/lambda.snakecase}}");
            generator.writeStartObject();
            for (Map.Entry<?, ?> item0 : this.{{name}}.entrySet()) {
                generator.writeKey(item0.getKey());
                item0.getValue().serialize(generator, mapper);
            }
            generator.writeEnd();
        }
        {{/isMap}}
        {{^isMap}}
        generator.writeKey("{{#lambda.snakecase}}{{name}}{{/lambda.snakecase}}");
        generator.write(this.{{name}});
        {{/isMap}}
        {{/vars}}
    }

    public static class Builder extends ObjectBuilderBase implements ObjectBuilder<{{classname}}> {
       {{#vars}}
       private {{{datatypeWithEnum}}} {{name}};
       {{/vars}}

        {{#vars}}
        public Builder {{name}}({{{datatypeWithEnum}}} value) {
            this.{{name}} = value;
            return this;
        }
        {{/vars}}
    
        public {{classname}} build() {
            _checkSingleUse();
            return new {{classname}}(this);
        }
    }

    public static final JsonpDeserializer<{{classname}}> _DESERIALIZER = ObjectBuilderDeserializer
            .lazy(Builder::new, {{classname}}::setup{{classname}}Deserializer);

    protected static void setup{{classname}}Deserializer(ObjectDeserializer<{{classname}}.Builder> op) {
        {{#vars}}
        {{#isEnumOrRef}}
        op.add(Builder::{{name}}, {{{classname}}}._DESERIALIZER, "{{#lambda.snakecase}}{{name}}{{/lambda.snakecase}}");
        {{/isEnumOrRef}}
        {{#isMap}}
        op.add(Builder::{{name}}, JsonpDeserializer.stringMapDeserializer({{{items.datatypeWithEnum}}}._DESERIALIZER), "{{#lambda.snakecase}}{{name}}{{/lambda.snakecase}}");
        {{/isMap}}
        {{^isMap}}
        {{^isEnumOrRef}}
        op.add(Builder::{{name}}, JsonpDeserializer.{{#lambda.lowercase}}{{{datatypeWithEnum}}}{{/lambda.lowercase}}Deserializer(), "{{#lambda.snakecase}}{{name}}{{/lambda.snakecase}}");
        {{/isEnumOrRef}}
        {{/isMap}}
        {{/vars}}
    }
}

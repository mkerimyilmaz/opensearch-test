{{>Partials/LicenseHeader}}

package {{packageName}};

import org.opensearch.client.ApiClient;
import org.opensearch.client.opensearch._types.OpenSearchException;
import org.opensearch.client.opensearch._types.ErrorResponse;
import org.opensearch.client.transport.OpenSearchTransport;
import org.opensearch.client.transport.JsonEndpoint;
import org.opensearch.client.transport.TransportOptions;
import org.opensearch.client.util.ObjectBuilder;
import java.io.IOException;
{{#async}}
import java.util.concurrent.CompletableFuture;
{{/async}}
import java.util.function.Function;
import javax.annotation.Nullable;

public class {{className}} extends ApiClient<OpenSearchTransport, {{className}}> {
    public {{className}}(OpenSearchTransport transport) {
        super(transport, null);
    }

    public {{className}}(OpenSearchTransport transport, @Nullable TransportOptions transportOptions) {
        super(transport, transportOptions);
    }

    @Override
    public {{className}} withTransportOptions(@Nullable TransportOptions transportOptions) {
        return new {{className}}(this.transport, transportOptions);
    }
{{#operations}}

    public {{#async}}CompletableFuture<{{/async}}{{responseType}}{{#async}}>{{/async}} {{name}}({{requestType}} request) throws IOException, OpenSearchException {
        JsonEndpoint<{{requestType}}, {{responseType}}, ErrorResponse> endpoint = (JsonEndpoint<{{requestType}}, {{responseType}}, ErrorResponse>) {{requestType}}._ENDPOINT;

        return this.transport.performRequest{{#async}}Async{{/async}}(request, endpoint, this.transportOptions);
    }

    public final {{#async}}CompletableFuture<{{/async}}{{responseType}}{{#async}}>{{/async}} {{name}}(Function<{{requestType}}.Builder, ObjectBuilder<{{requestType}}>> fn)
            throws IOException, OpenSearchException {
        return {{name}}(fn.apply(new {{requestType}}.Builder()).build());
    }
{{/operations}}
}
public class {{className}} extends {{TYPES.Client.ApiClient}}<{{TYPES.Client.Transport.OpenSearchTransport}}, {{className}}> {
    public {{className}}({{TYPES.Client.Transport.OpenSearchTransport}} transport) {
        super(transport, null);
    }

    public {{className}}({{TYPES.Client.Transport.OpenSearchTransport}} transport, @{{TYPES.Javax.Annotation.Nullable}} {{TYPES.Client.Transport.TransportOptions}} transportOptions) {
        super(transport, transportOptions);
    }

    @Override
    public {{className}} withTransportOptions(@{{TYPES.Javax.Annotation.Nullable}} {{TYPES.Client.Transport.TransportOptions}} transportOptions) {
        return new {{className}}(this.transport, transportOptions);
    }
{{#children}}

    public {{type}} {{#camelCase}}{{name}}{{/camelCase}}() {
        return new {{type}}(this.transport, this.transportOptions);
    }
{{/children}}
{{#operations}}

    public {{#async}}{{TYPES.Java.Util.Concurrent.CompletableFuture}}<{{/async}}{{responseType}}{{#async}}>{{/async}} {{#camelCase}}{{id}}{{/camelCase}}({{type}} request) throws {{TYPES.Java.Io.IOException}}, {{TYPES.Client.OpenSearch._Types.OpenSearchException}} {
        {{TYPES.Client.Transport.JsonEndpoint}}<{{type}}, {{responseType}}, {{TYPES.Client.OpenSearch._Types.ErrorResponse}}> endpoint = ({{TYPES.Client.Transport.JsonEndpoint}}<{{type}}, {{responseType}}, {{TYPES.Client.OpenSearch._Types.ErrorResponse}}>) {{type}}._ENDPOINT;

        return this.transport.performRequest{{#async}}Async{{/async}}(request, endpoint, this.transportOptions);
    }

    public final {{#async}}{{TYPES.Java.Util.Concurrent.CompletableFuture}}<{{/async}}{{responseType}}{{#async}}>{{/async}} {{#camelCase}}{{id}}{{/camelCase}}({{builderFnType}} fn)
            throws IOException, OpenSearchException {
        return {{#camelCase}}{{id}}{{/camelCase}}(fn.apply(new {{type.builderType}}()).build());
    }
{{/operations}}
}
{{>Partials/ClassDeclaration}} {
    /**
     * {@link {{className}}} variant kinds.
     */
    public enum Kind{{#discriminated}} implements {{TYPES.Client.Json.JsonEnum}}{{/discriminated}} {
        {{#variants}}{{#pascalCase}}{{name}}{{/pascalCase}}{{#discriminated}}({{#quoted}}{{name}}{{/quoted}}){{/discriminated}}{{^-last}},{{/-last}}{{/variants}}
        {{#discriminated}};

        private final String jsonValue;

        Kind(String jsonValue) {
            this.jsonValue = jsonValue;
        }

        @Override
        public String jsonValue() {
            return jsonValue;
        }
        {{/discriminated}}
    }

    private final Kind _kind;
    private final {{variantBaseType}} _value;

    @Override
    public final Kind _kind() {
        return _kind;
    }

    @Override
    public final {{variantBaseType}} _get() {
        return _value;
    }

{{#discriminated}}
    public {{className}}({{variantBaseType}} value) {
        this._kind = {{TYPES.Client.Util.ApiTypeHelper}}.requireNonNull(value._{{#camelCase}}{{className}}{{/camelCase}}Kind(), this, "<variant kind>");
        this._value = {{TYPES.Client.Util.ApiTypeHelper}}.requireNonNull(value, this, "<variant value>");
    }
{{/discriminated}}
{{^discriminated}}
    private {{className}}(Kind kind, Object value) {
        this._kind = kind;
        this._value = value;
    }
{{/discriminated}}

    private {{className}}(Builder builder) {
        this._kind = {{TYPES.Client.Util.ApiTypeHelper}}.requireNonNull(builder._kind, builder, "<variant kind>");
        this._value = {{TYPES.Client.Util.ApiTypeHelper}}.requireNonNull(builder._value, builder, "<variant value>");
    }

    public static {{className}} of({{type.builderFnType}} fn) {
        return fn.apply(new Builder()).build();
    }

{{#canStringify}}
    public String _toJsonString() {
        switch (_kind) {
        {{#variants}}
            case {{#pascalCase}}{{name}}{{/pascalCase}}:
                return {{#type.queryParamify}}this.{{#camelCase}}{{name}}{{/camelCase}}(){{/type.queryParamify}};
        {{/variants}}
            default:
                throw new IllegalStateException("Unknown kind " + _kind);
        }
    }

{{/canStringify}}
    {{#variants}}
    /**
     * Is this variant instance of kind {@code {{name}}}?
     */
    public boolean is{{#pascalCase}}{{name}}{{/pascalCase}}() {
        return _kind == Kind.{{#pascalCase}}{{name}}{{/pascalCase}};
    }

    /**
     * Get the {@code {{name}}} variant value.
     *
     * @throws IllegalStateException if the current variant is not the {@code {{name}}} kind.
     */
    public {{type}} {{#asFieldName}}{{name}}{{/asFieldName}}() {
        return {{TYPES.Client.Util.TaggedUnionUtils}}.get(this, Kind.{{#pascalCase}}{{name}}{{/pascalCase}});
    }

    {{/variants}}

    @Override
    public void serialize({{TYPES.Jakarta.Json.Stream.JsonGenerator}} generator, {{TYPES.Client.Json.JsonpMapper}} mapper) {
    {{#discriminated}}
        mapper.serialize(_value, generator);
    {{/discriminated}}
    {{^discriminated}}
        if (_value instanceof {{TYPES.Client.Json.JsonpSerializable}}) {
            (({{TYPES.Client.Json.JsonpSerializable}}) _value).serialize(generator, mapper);
        }{{#nonShapeVariants}}{{#-first}} else {
            switch (_kind) {
        {{/-first}}
                case {{#pascalCase}}{{name}}{{/pascalCase}}:
                    {{#type.serializer}}(({{type}}) this._value){{/type.serializer}}
                    break;
        {{#-last}}
            }
        }
        {{/-last}}
        {{/nonShapeVariants}}
    {{/discriminated}}
    }

    public static class Builder extends {{TYPES.Client.Util.ObjectBuilderBase}} implements {{TYPES.Client.Util.ObjectBuilder}}<{{className}}> {
        private Kind _kind;
        private {{variantBaseType}} _value;

        {{#variants}}
        public {{TYPES.Client.Util.ObjectBuilder}}<{{className}}> {{#asFieldName}}{{name}}{{/asFieldName}}({{type}} v) {
            this._kind = Kind.{{#pascalCase}}{{name}}{{/pascalCase}};
            this._value = v;
            return this;
        }
        {{#type.hasBuilder}}

        public {{TYPES.Client.Util.ObjectBuilder}}<{{className}}> {{#asFieldName}}{{name}}{{/asFieldName}}({{type.builderFnType}} fn) {
            return this.{{#asFieldName}}{{name}}{{/asFieldName}}(fn.apply(new {{type.builderType}}()).build());
        }
        {{/type.hasBuilder}}

        {{/variants}}
        @Override
        public {{className}} build() {
            _checkSingleUse();
            return new {{className}}(this);
        }
    }

{{#discriminated}}
    protected static void setup{{className}}Deserializer({{TYPES.Client.Json.ObjectDeserializer}}<Builder> op) {
    {{#variants}}
        op.add(Builder::{{#asFieldName}}{{name}}{{/asFieldName}}, {{type}}._DESERIALIZER, {{#quoted}}{{name}}{{/quoted}});
    {{/variants}}

        op.setTypeProperty({{#quoted}}{{discriminatingField}}{{/quoted}}, {{#defaultVariant}}Kind.{{#pascalCase}}{{name}}{{/pascalCase}}.jsonValue(){{/defaultVariant}}{{^defaultVariant}}null{{/defaultVariant}});
    }

    public static final {{TYPES.Client.Json.JsonpDeserializer}}<{{className}}> _DESERIALIZER = {{TYPES.Client.Json.ObjectBuilderDeserializer}}.lazy(Builder::new, {{className}}::setup{{className}}Deserializer, Builder::build);
{{/discriminated}}
{{^discriminated}}
    private static {{TYPES.Client.Json.JsonpDeserializer}}<{{className}}> build{{className}}Deserializer() {
        return new {{TYPES.Client.Json.UnionDeserializer.builderType}}<{{className}}, Kind, Object>({{className}}::new, {{hasAmbiguities}})
            {{#variants}}.addMember(Kind.{{#pascalCase}}{{name}}{{/pascalCase}}, {{#type}}{{>Type/deserializer}}{{/type}}){{/variants}}
            .build();
    }

    public static final {{TYPES.Client.Json.JsonpDeserializer}}<{{className}}> _DESERIALIZER = {{TYPES.Client.Json.JsonpDeserializer}}.lazy({{className}}::build{{className}}Deserializer);
{{/discriminated}}

    {{>TaggedUnionShape/HashCode}}

    {{>TaggedUnionShape/Equals}}
}
